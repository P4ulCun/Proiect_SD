1. Punctele cu coord Y mai mare decat V
2. Sa tai ultimele N elemente
3. Eliminare duble negatii


1.
lista_puncte([], _, []).
lista_puncte([punct(X, Y)|T], V, [X|R]) :- Y > V, lista_puncte(T, V, R).
lista_puncte([punct(_, Y)|T], V, R) :- Y =< V, lista_puncte(T, V, R).



2. dropN(L, R, N) :- append(R, L1, L), length(L1, N).

Explicatii:

append(R, L1, L):
Descompune lista L în două părți:
R: prefixul pe care vrem să îl păstrăm (toate elementele în afară de ultimele N)
L1: sufixul pe care vrem să îl eliminăm (ultimele N elemente)

length(L1, N):
Constrânge lungimea sufixului L1 să fie exact N
Asigură că eliminăm exact N elemente de la sfârșit



3. Scrieti un predicat rmdn/2 cu proprietatea ca rmdn(Phi, Psi) este adevarat 
daca si numai daca Psi este rezultatul eliminarii tuturor negatiilor duble din Phi.

Solutie: 
rmdn(Phi, Phi) :- atom(Phi).
rmdn(non(Phi), non(Phi)) :- atom(Phi).
rmdn(non(non(Phi)), Psi) :- rmdn(Phi, Psi).
rmdn(non(si(Phi,Psi)),non(A)) :- rmdn(si(Phi,Psi),A).
rmdn(non(sau(Phi,Psi)),non(A)) :- rmdn(sau(Phi,Psi),A).
rmdn(non(imp(Phi,Psi)),non(A)) :- rmdn(imp(Phi,Psi),A).
rmdn(si(Phi, Psi), si(Phi1, Psi1)) :- rmdn(Phi, Phi1), rmdn(Psi, Psi1).
rmdn(sau(Phi, Psi), sau(Phi1, Psi1)) :- rmdn(Phi, Phi1), rmdn(Psi, Psi1).
rmdn(imp(Phi, Psi), imp(Phi1, Psi1)) :- rmdn(Phi, Phi1), rmdn(Psi, Psi1).